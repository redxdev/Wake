local test = require('test')
local class = require('class')
local type = type
local Matrix3x3 = Matrix3x3
local Vector3 = Vector3
local tostring = tostring

test.suite('Matrix3x3 Library')

test.test('creation', function()
    local m = Matrix3x3.new()
    test.assert_equal(#m, 9)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 0)
    test.expect_equal(m:get(1, 3), 0)
    test.expect_equal(m:get(2, 1), 0)
    test.expect_equal(m:get(2, 2), 1)
    test.expect_equal(m:get(2, 3), 0)
    test.expect_equal(m:get(3, 1), 0)
    test.expect_equal(m:get(3, 2), 0)
    test.expect_equal(m:get(3, 3), 1)

    local m = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    test.assert_equal(#m, 9)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(1, 3), 3)
    test.expect_equal(m:get(2, 1), 4)
    test.expect_equal(m:get(2, 2), 5)
    test.expect_equal(m:get(2, 3), 6)
    test.expect_equal(m:get(3, 1), 7)
    test.expect_equal(m:get(3, 2), 8)
    test.expect_equal(m:get(3, 3), 9)

    local m = Matrix3x3.new{1, 2, 3, 4, 5, 6, 7, 8, 9}
    test.assert_equal(#m, 9)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(1, 3), 3)
    test.expect_equal(m:get(2, 1), 4)
    test.expect_equal(m:get(2, 2), 5)
    test.expect_equal(m:get(2, 3), 6)
    test.expect_equal(m:get(3, 1), 7)
    test.expect_equal(m:get(3, 2), 8)
    test.expect_equal(m:get(3, 3), 9)
end)

test.test('size', function()
    local m = Matrix3x3.new()
    test.expect_equal(#m, 9)
    test.expect_equal(m:rows(), 3)
    test.expect_equal(m:columns(), 3)
end)

test.test('get row', function()
    local m = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    test.assert_equal(m:get(1), Vector3.new(1, 2, 3))
    test.assert_equal(m:get(2), Vector3.new(4, 5, 6))
    test.assert_equal(m:get(3), Vector3.new(7, 8, 9))
end)

test.test('equality', function()
    local a = Matrix3x3.new(3, 4, 5, 6, 7, 8, 9, 10, 11)
    local b = Matrix3x3.new(5, 6, 7, 8, 9, 10, 11, 12, 13)
    test.assert_not_equal(a, b)

    b = Matrix3x3.new(3, 4, 5, 6, 7, 8, 9, 10, 11)
    test.assert_equal(a, b)
end)

test.test('table as parameter', function()
    test.assert_equal(Matrix3x3.get({1, 2, 3, 4, 5, 6, 7, 8, 9}, 3, 3), 9)
end)

test.test('table', function()
    local m = Matrix3x3.new{1, 2, 3, 4, 5, 6, 7, 8, 9}
    local t = m:table()
    test.assert_equal(#t, 9)
    test.expect_equal(t[1], 1)
    test.expect_equal(t[2], 2)
    test.expect_equal(t[3], 3)
    test.expect_equal(t[4], 4)
    test.expect_equal(t[5], 5)
    test.expect_equal(t[6], 6)
    test.expect_equal(t[7], 7)
    test.expect_equal(t[8], 8)
    test.expect_equal(t[9], 9)
end)

test.test('set', function()
    local m = Matrix3x3.new()
    m:set(1, 1, 1)
    m:set(1, 2, 2)
    m:set(1, 3, 3)
    m:set(2, 1, 4)
    m:set(2, 2, 5)
    m:set(2, 3, 6)
    m:set(3, 1, 7)
    m:set(3, 2, 8)
    m:set(3, 3, 9)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(1, 3), 3)
    test.expect_equal(m:get(2, 1), 4)
    test.expect_equal(m:get(2, 2), 5)
    test.expect_equal(m:get(2, 3), 6)
    test.expect_equal(m:get(3, 1), 7)
    test.expect_equal(m:get(3, 2), 8)
    test.expect_equal(m:get(3, 3), 9)
end)

test.test('setAll', function()
    local m = Matrix3x3.new()
    m:setAll(1, 2, 3, 4, 5, 6, 7, 8, 9)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(1, 3), 3)
    test.expect_equal(m:get(2, 1), 4)
    test.expect_equal(m:get(2, 2), 5)
    test.expect_equal(m:get(2, 3), 6)
    test.expect_equal(m:get(3, 1), 7)
    test.expect_equal(m:get(3, 2), 8)
    test.expect_equal(m:get(3, 3), 9)
end)

test.test('transpose', function()
    local m = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    m = m:transpose()
    test.assert_equal(m:rows(), 3)
    test.assert_equal(m:columns(), 3)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 4)
    test.expect_equal(m:get(1, 3), 7)
    test.expect_equal(m:get(2, 1), 2)
    test.expect_equal(m:get(2, 2), 5)
    test.expect_equal(m:get(2, 3), 8)
    test.expect_equal(m:get(3, 1), 3)
    test.expect_equal(m:get(3, 2), 6)
    test.expect_equal(m:get(3, 3), 9)
end)

test.test('apply', function()
    local a = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    local b = a:apply(function(v, i, r, c) return v + i + r + c end)
    test.expect_equal(b:get(1, 1), 4)
    test.expect_equal(b:get(1, 2), 7)
    test.expect_equal(b:get(1, 3), 10)
    test.expect_equal(b:get(2, 1), 11)
    test.expect_equal(b:get(2, 2), 14)
    test.expect_equal(b:get(2, 3), 17)
    test.expect_equal(b:get(3, 1), 18)
    test.expect_equal(b:get(3, 2), 21)
    test.expect_equal(b:get(3, 3), 24)
end)

test.test('unary minus', function()
    local a = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    a = -a
    test.expect_equal(a:get(1, 1), -1)
    test.expect_equal(a:get(1, 2), -2)
    test.expect_equal(a:get(1, 3), -3)
    test.expect_equal(a:get(2, 1), -4)
    test.expect_equal(a:get(2, 2), -5)
    test.expect_equal(a:get(2, 3), -6)
    test.expect_equal(a:get(3, 1), -7)
    test.expect_equal(a:get(3, 2), -8)
    test.expect_equal(a:get(3, 3), -9)
end)

test.test('determinant', function()
    local m = Matrix3x3.new(1, 2, 3, 4, 5, 6, 7, 8, 9)
    test.expect_equal(m:determinant(), 0)
end)

test.test('inverse', function()
    local m = Matrix3x3.new(2, 1, 0, 2, 0, 0, 0, 0, 1)
    test.expect_equal(m:inverse(), Matrix3x3.new(0, 0.5, 0, 1, -1, 0, 0, 0, 1))
end)