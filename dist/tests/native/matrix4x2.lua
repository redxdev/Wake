local test = require('test')
local Matrix4x2 = Matrix4x2
local Vector2 = Vector2

test.suite('Matrix4x2 Library')

test.test('creation', function()
    local m = Matrix4x2.new()
    test.assert_equal(#m, 8)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 0)
    test.expect_equal(m:get(2, 1), 0)
    test.expect_equal(m:get(2, 2), 1)
    test.expect_equal(m:get(3, 1), 0)
    test.expect_equal(m:get(3, 2), 0)
    test.expect_equal(m:get(4, 1), 0)
    test.expect_equal(m:get(4, 2), 0)

    local m = Matrix4x2.new(1, 2, 3, 4, 5, 6, 7, 8)
    test.assert_equal(#m, 8)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(2, 1), 3)
    test.expect_equal(m:get(2, 2), 4)
    test.expect_equal(m:get(3, 1), 5)
    test.expect_equal(m:get(3, 2), 6)
    test.expect_equal(m:get(4, 1), 7)
    test.expect_equal(m:get(4, 2), 8)

    local m = Matrix4x2.new{1, 2, 3, 4, 5, 6, 7, 8}
    test.assert_equal(#m, 8)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(2, 1), 3)
    test.expect_equal(m:get(2, 2), 4)
    test.expect_equal(m:get(3, 1), 5)
    test.expect_equal(m:get(3, 2), 6)
    test.expect_equal(m:get(4, 1), 7)
    test.expect_equal(m:get(4, 2), 8)

    test.expect_error(Matrix4x2.new, 1, 2)
end)

test.test('size', function()
    local m = Matrix4x2.new()
    test.expect_equal(#m, 8)
    test.expect_equal(m:rows(), 4)
    test.expect_equal(m:columns(), 2)
end)

test.test('get row', function()
    local m = Matrix4x2.new(1, 2, 3, 4, 5, 6, 7, 8)
    test.assert_equal(m:get(1), Vector2.new(1, 2))
    test.assert_equal(m:get(2), Vector2.new(3, 4))
    test.assert_equal(m:get(3), Vector2.new(5, 6))
    test.assert_equal(m:get(4), Vector2.new(7, 8))
end)

test.test('equality', function()
    local a = Matrix4x2.new(3, 4, 5, 6, 7, 8, 9, 10)
    local b = Matrix4x2.new(5, 6, 7, 8, 9, 10, 11, 12)
    test.assert_not_equal(a, b)

    b = Matrix4x2.new(3, 4, 5, 6, 7, 8, 9, 10)
    test.assert_equal(a, b)
end)

test.test('table as parameter', function()
    test.assert_equal(Matrix4x2.get({1, 2, 3, 4, 5, 6, 7, 8}, 4, 2), 8)
end)

test.test('table', function()
    local m = Matrix4x2.new{1, 2, 3, 4, 5, 6, 7, 8}
    local t = m:table()
    test.assert_equal(#t, 8)
    test.expect_equal(t[1], 1)
    test.expect_equal(t[2], 2)
    test.expect_equal(t[3], 3)
    test.expect_equal(t[4], 4)
    test.expect_equal(t[5], 5)
    test.expect_equal(t[6], 6)
    test.expect_equal(t[7], 7)
    test.expect_equal(t[8], 8)
end)

test.test('set', function()
    local m = Matrix4x2.new()
    m:set(1, 1, 1)
    m:set(1, 2, 2)
    m:set(2, 1, 3)
    m:set(2, 2, 4)
    m:set(3, 1, 5)
    m:set(3, 2, 6)
    m:set(4, 1, 7)
    m:set(4, 2, 8)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(2, 1), 3)
    test.expect_equal(m:get(2, 2), 4)
    test.expect_equal(m:get(3, 1), 5)
    test.expect_equal(m:get(3, 2), 6)
    test.expect_equal(m:get(4, 1), 7)
    test.expect_equal(m:get(4, 2), 8)
end)

test.test('setAll', function()
    local m = Matrix4x2.new()
    m:setAll(1, 2, 3, 4, 5, 6, 7, 8)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 2)
    test.expect_equal(m:get(2, 1), 3)
    test.expect_equal(m:get(2, 2), 4)
    test.expect_equal(m:get(3, 1), 5)
    test.expect_equal(m:get(3, 2), 6)
    test.expect_equal(m:get(4, 1), 7)
    test.expect_equal(m:get(4, 2), 8)
end)

test.test('transpose', function()
    local m = Matrix4x2.new(1, 2, 3, 4, 5, 6, 7, 8)
    m = m:transpose()
    test.assert_equal(m:rows(), 2)
    test.assert_equal(m:columns(), 4)
    test.expect_equal(m:get(1, 1), 1)
    test.expect_equal(m:get(1, 2), 3)
    test.expect_equal(m:get(1, 3), 5)
    test.expect_equal(m:get(1, 4), 7)
    test.expect_equal(m:get(2, 1), 2)
    test.expect_equal(m:get(2, 2), 4)
    test.expect_equal(m:get(2, 3), 6)
    test.expect_equal(m:get(2, 4), 8)
end)

test.test('apply', function()
    local a = Matrix4x2.new(1, 2, 3, 4, 5, 6, 7, 8)
    local b = a:apply(function(v, i, r, c) return v + i + r + c end)
    test.expect_equal(b:get(1, 1), 4)
    test.expect_equal(b:get(1, 2), 7)
    test.expect_equal(b:get(2, 1), 9)
    test.expect_equal(b:get(2, 2), 12)
    test.expect_equal(b:get(3, 1), 14)
    test.expect_equal(b:get(3, 2), 17)
    test.expect_equal(b:get(4, 1), 19)
    test.expect_equal(b:get(4, 2), 22)
end)

test.test('unary minus', function()
    local a = Matrix4x2.new(1, 2, 3, 4, 5, 6, 7, 8)
    a = -a
    test.expect_equal(a:get(1, 1), -1)
    test.expect_equal(a:get(1, 2), -2)
    test.expect_equal(a:get(2, 1), -3)
    test.expect_equal(a:get(2, 2), -4)
    test.expect_equal(a:get(3, 1), -5)
    test.expect_equal(a:get(3, 2), -6)
    test.expect_equal(a:get(4, 1), -7)
    test.expect_equal(a:get(4, 2), -8)
end)